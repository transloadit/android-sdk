plugins {
    id 'signing'
}

apply plugin: 'com.android.library'

repositories {
    mavenCentral()
    jcenter()
}

android {
    compileSdkVersion 29
    buildToolsVersion "30.0.2"
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.transloadit.sdk:transloadit:0.4.1'
    implementation 'io.tus.android.client:tus-android-client:0.1.9'
    implementation 'io.tus.java.client:tus-java-client:0.4.5'
    implementation 'org.jetbrains:annotations:22.0.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:3.11.1'
    testImplementation 'org.mock-server:mockserver-junit-rule:5.11.2'
}

def config = new ConfigSlurper().parse(new File("${projectDir}/src/main/res/buildinfo.properties").toURI().toURL())

version=config.version
group=config.group
description=config.description



task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        owner.classpath += variant.javaCompileProvider.get().classpath
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}

def pomConfig = {
    name 'transloadit-android'
    url 'https://github.com/transloadit/android-sdk'
    licenses {
        license {
            name 'The MIT License (MIT)'
            url 'http://opensource.org/licenses/MIT'
        }
    }
    developers {
        developer {
            id 'Transloadit'
            name 'Transloadit'
            email 'support@transloadit.com'
        }
    }

    scm {
        url 'https://github.com/transloadit/android-sdk'
        connection 'https://github.com/transloadit/android-sdk'
        developerConnection 'https://github.com/transloadit/android-sdk'
    }
}

publishing {
    publications {
        androidRelease(MavenPublication) {
            afterEvaluate {
                from components.release
                groupId project.getGroup()
                artifactId 'transloadit-android'
                description project.getDescription()
                version project.getVersion()
                artifact sourcesJar
                artifact javadocJar
                pom.withXml {
                    def root = asNode()
                    root.appendNode('description', project.getDescription())
                    root.children().last() + pomConfig
                }
            }
        }
    }
}

signing{
    def signingKeyId = System.getenv("SIGNING_KEY_ID")
    def signingPassword = System.getenv("SIGNING_KEY_PASSWORD")
    def signingKey = System.getenv("SIGNING_KEY_AMORED")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications.androidRelease
}


